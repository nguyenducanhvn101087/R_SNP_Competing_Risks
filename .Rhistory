tmp <-survdiff(Surv(time, status) ~ arm, data=dat)
str(tmp)
tmp$obs
names(tmp)
tmp$exp
coxph(Surv(time, status) ~ arm, data=dat)
tmp <-coxph(Surv(time, status) ~ arm, data=dat)
tmp$coefficients
tmp$coefficients
stores <- data.frame(lhr=numeric(0), ndeath=numeric(0))
attributes(tmp)
attribute(tmp, "nevent")
attr(tmp, "nevent")
tmp$nevent
require(survival)
set.seed(69)
MST.c <- 34; MST.i <- 48.5
power <- 0.8; alp <- 0.05
nsim  <- 2e4; nsize <- 440
hc <- log(2)/MST.c; hi <- log(2)/MST.i
hcen <- -log(1-0.05)/24
arm <- rep(c("c", "i"), each=nsize/2)
stores <- data.frame(lhr=numeric(0), ndeath=numeric(0))
for (i in 1:nsim) {
tc <- rexp(n = nsize/2, rate = hc); ti <- rexp(n=nsize/2, rate = hi);
tcen <- rexp(n=nsize, rate = hcen)
time <- c(tc, ti);
status <- ifelse(time >= tcen, 0, 1)
time <- ifelse(time >= tcen, tcen, time)
dat <- data.frame(time, status, arm)
tmp <- coxph(Surv(time, status) ~ arm, data=dat)
stores <- rbind(stores, c(tmp$coefficients, tmp$nevent))
} # end of for (i in 1:nsim)
nsim <- 100
require(survival)
set.seed(69)
MST.c <- 34; MST.i <- 48.5
power <- 0.8; alp <- 0.05
nsim  <- 2e4; nsize <- 440
hc <- log(2)/MST.c; hi <- log(2)/MST.i
hcen <- -log(1-0.05)/24
arm <- rep(c("c", "i"), each=nsize/2)
stores <- data.frame(lhr=numeric(0), ndeath=numeric(0))
for (i in 1:nsim) {
tc <- rexp(n = nsize/2, rate = hc); ti <- rexp(n=nsize/2, rate = hi);
tcen <- rexp(n=nsize, rate = hcen)
time <- c(tc, ti);
status <- ifelse(time >= tcen, 0, 1)
time <- ifelse(time >= tcen, tcen, time)
dat <- data.frame(time, status, arm)
tmp <- coxph(Surv(time, status) ~ arm, data=dat)
stores <- rbind(stores, c(tmp$coefficients, tmp$nevent))
} # end of for (i in 1:nsim)
stores
names(stores)
sd(stores[[1]])
stores[[1]]
sd(stores[[1]])
sqrt(256)*(log(1.09)-log(0.85))/2
mean(stores[[1]])
exp(mean(stores[[1]]))
exp(median(stores[[1]]))
mean(stores[[2]])
median(stores[[2]])
exp(log(0.85)+2)
log(0.85)
2+log(0.85)
exp(log(0.85)+2/sqrt(256))
exp(log(0.85)+2/sqrt(256))+0.85
exp(log(0.85)+2/sqrt(256))
exp(log(0.85)+4/sqrt(256))
sqrt(2)
0.85+0.85
sqrt(256)*(log(1.09)-log(0.85))/1.96
power <- function(medsurvt.i, medsurvt.c, alp, nd) {
pnorm(abs(log(medsurvt.i/medsurvt.c))*sqrt(nd)/2 - qnorm(1-alp/2))
}
medsurvt.c <- 20
alp <- 0.05
nd <- 243
x <- seq(20, 30.8, by=1)
plot(medsurvt.c/x, power(x, medsurvt.c, alp, nd), type="l", col="blue")
abline(h =  power(25.7,20,0.05,243), col="red"); abline(v =  medsurvt.c/25.7, col="red")
plot(medsurvt.c/x, power(x, medsurvt.c, alp, nd), type="l", col="blue", ylim=c(0,1))
abline(h =  power(25.7,20,0.05,243), col="red"); abline(v =  medsurvt.c/25.7, col="red")
243/440
sqrt(4/256)
4/256
256/4
log(0.85)+2*0.125
exp(log(0.85)+2*0.125)
exp(log(0.85)-2*0.125)
exp(log(0.9)-2*0.125)
exp(log(0.9)+2*0.125)
52*7
346*15
30*10
8190
5190+300
5190+300+2510
990/15
6900-6751
x <- c(seq(2,16,by=2))
x
sum(x)
72/8
pbinom(q = 44, size=440, prob=0.1)
pbinom(q = 44, size=440, prob=0.1, lower.tail = T)
pbinom(q = 44, size=440, prob=0.1, lower.tail = F)
dbinom(q = 44, size=440, prob=0.1, lower.tail = F)
?pbinom
dbinom(q = 44, size=440, prob=0.1)
dbinom(x = 44, size=440, prob=0.1)
dbinom(x = 44, size=440, prob=0.05)
dbinom(q = 44, size=440, prob=0.1, lower.tail = F)
pbinom(q = 44, size=440, prob=0.1)
pbinom(q = 44, size=440, prob=0.05)
pbinom(q = 44, size=440, prob=0.05, lower.tail=F)
pbinom(q = 44, size=440, prob=0.1, lower.tail=F)
pbinom(q = 44, size=440, prob=0.1, lower.tail=F)+dbinom(x=44, size=440, prob=0.1)
p <- seq(0.05, 0.1, by=0.005) # prevelance of UTUC from 5% to 10%
pexceed <- pbinom(q = 44, size=440, prob=p, lower.tail=F)+dbinom(x=44, size=440, prob=p)
pexceed
plot(p, pexceed, ylim=c(0,1), type="l")
plot(p, pexceed, ylim=c(0,1), type="l", xlab="UTUC Prevalence", ylab="Prob. Cap Exceeded")
plot(p, pexceed, ylim=c(0,1), type="l", xlab="UTUC Prevalence", ylab="Prob. Cap Exceeded", col="blue")
tail(pexceed,1)
abline(h=tail(pexceed,1))
abline(h=tail(pexceed,1), col="red", type=2)
abline(h=tail(pexceed,1), col="red", type=3)
plot(p, pexceed, ylim=c(0,1), type="l", xlab="UTUC Prevalence", ylab="Prob. Cap Exceeded", col="blue")
abline(h=tail(pexceed,1), col="red", type=3)
?abline
plot(p, pexceed, ylim=c(0,1), type="l", xlab="UTUC Prevalence", ylab="Prob. Cap Exceeded", col="blue")
abline(h=tail(pexceed,1), col="red", lty=3)
abline(v=tail(p,1), col="red", lty=3)
plot(p, pexceed, ylim=c(0,1), xlim=c(0,1),type="l", xlab="UTUC Prevalence", ylab="Prob. Cap Exceeded", col="blue")
plot(p, pexceed, ylim=c(0,1), xlim=c(0,max(p)),type="l", xlab="UTUC Prevalence", ylab="Prob. Cap Exceeded", col="blue")
plot(p, pexceed, ylim=c(0,1), xlim=c(min(p),max(p)),type="l", xlab="UTUC Prevalence", ylab="Prob. Cap Exceeded", col="blue")
abline(h=tail(pexceed,1), col="red", lty=3)
abline(v=tail(p,1), col="red", lty=3)
abline(h=pexceed[which(p==0.08)])
abline(h=pexceed[which(p==0.08)], lty=3)
p <- seq(0.05, 0.1, by=0.005) # prevelance of UTUC from 5% to 10%
pexceed <- pbinom(q = 44, size=440, prob=p, lower.tail=F)+dbinom(x=44, size=440, prob=p)
plot(p, pexceed, ylim=c(0,1), xlim=c(min(p),max(p)),type="l", xlab="UTUC Prevalence", ylab="Prob. Cap Exceeded", col="blue")
abline(h=tail(pexceed,1), col="red", lty=3)
abline(v=tail(p,1), col="red", lty=3)
abline(h=pexceed[which(p==0.08)], lty=3)
abline(v=p[which(p==0.08)], lty=3)
plot(p, pexceed, ylim=c(0,1), xlim=c(min(p),max(p)), lwd=2,
type="l", xlab="UTUC Prevalence", ylab="Prob. Cap Exceeded", col="blue")
abline(h=tail(pexceed,1), col="red", lwd=2,lty=3)
abline(v=tail(p,1), col="red", lwd=2,lty=3)
abline(h=pexceed[which(p==0.08)], lwd=2,lty=3)
abline(v=p[which(p==0.08)], lwd=2,lty=3)
30.4375*12
require(xlsx)
install.packages("rJava")
require(xlsx)
require(rJava)
require(xlsx)
install.packages("xlsx")
require(xlsx)
install.packages("rJava")
require(xlsx)
require(rJava)
mdd <- function(hr.ate, pow, alp=0.05) {
loghaz.mdd <- (qnorm(1-alp/2)/(qnorm(1-alp/2)+qnorm(pow))) * log(hr.ate)
exp(loghaz.mdd)
} # end of mdd
mdd(hr.ate = 0.76, pow=0.8)
mdd(hr.ate = 0.76, pow=0.7)
mdd(hr.ate = 0.76, pow=0.66)
mdd(hr.ate = 0.76, pow=0.65)
mdd(hr.ate = 0.76, pow=0.63)
mdd(hr.ate = 0.76, pow=0.61)
mdd(hr.ate = 0.76, pow=0.6)
mdd(hr.ate = 0.76, pow=0.59)
power.prop.test(p1=.68, p2=.8)
power.prop.test(p1=.68, p2=.8, sig.level=.05, power=.8)
power.prop.test(p1=.48, p2=.68, sig.level=.05, power=.8)
out <- power.prop.test(p1=.48, p2=.68, sig.level=.05, power=.8)
out$n*2
out$n*2/.9
round(out$n*2/.9)
out$n*2/.95
round(out$n*2/.95)
out <- power.prop.test(p1=.48, p2=.68, sig.level=.05, power=.8, strict = T)
out$n*2/.95
out$n*2/.9
install.packages("Hmisc")
require(Hmisc)
power.prop.test(n = 92, p1=0.48, p2=.68)
power.prop.test(n = 92, p1=0.48, p2=.68, strict = T)
power.prop.test(n = 92, p1=0.48, p2=.68, strict = F)
16*21
16*21/7
300/6000
.8*222
.9*222
176/8
30/50*30
0.2*30
30/50
48/80
rexp
?rexp
8*365.25
8*(365.25-21.5)
8*(365.25-22)
8*(251-22)
(7200-1270+326.4+600+79+19)*4
(7200-1270+326.4+1000+79+19)*4
(7200-1270-326.4-1000-79-19)*4
(7200-1270-326.4-600-79-19)*4
(7200-1270-326.4-800-79-19)*4
(120000*30)
65-29
36*120000
2052-2016
44*120000
2060-2018
42*36000
120000*.2
24000*20
480000/40000
320*12*.2
326.4*12*.2
0.23*100
0.23*60
850-560
516-435
help(metafor)
require(metafor)
help(metafor)
library(haven)
install.packages("C:/Users/NGUYEA37/Downloads/haven_0.2.1.9000.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/NGUYEA37/Downloads/rocheBCE_1.0.zip", repos = NULL, type = "win.binary")
library(haven)
require(haven)
install.packages('assertthat')
require(haven)
?read_sas
13*29
13*15
13*12
178/13
178/700
4/120
-log(.95)/24
lam <- -log(.95)/24
pexp(12, rate = lam, lower.tail = T)
pexp(12, rate = lam, lower.tail = F)
pexp(48, rate = lam, lower.tail = T)
4/120
pexp(48, rate = lam, lower.tail = T)-pexp(24, rate = lam, lower.tail = T)
pexp(24, rate = lam, lower.tail = T)-pexp(0, rate = lam, lower.tail = T)
pexp(12, rate = lam, lower.tail = T)-pexp(0, rate = lam, lower.tail = T)
pexp(24, rate = lam, lower.tail = T)-pexp(12, rate = lam, lower.tail = T)
# Created by NDA
# Last modified by Anh - 28 Oct 2016
# ===================================
rm(list = ls())
source("../../../../../../Methods/R/survivalSampleSizeMisc.R")
# read accrual from Andrew's projection
enroll <- read.csv('../Sample_Size/AC_Calculation/Input/1_Andrew/Worksheet in WO29636 study AC Strategy_9May2016 AK.csv')
enroll <- enroll$Planned.Pts.recr.per.Month
enroll <- enroll[1:31]
enroll[31] <- enroll[31]-(sum(enroll)-700)
sum(enroll)
eDFS<- 377
mDFS<- 20
hDFS<- .75
efOS<- 428
mOS <- 34
hfOS<- .76
dor <- c(-log(1-.05)/24, -log(1-.034)/12, -log(1-.05)/12, -log(1-.1)/12, -log(1-.15)/12, -log(1-.2)/12, -log(1-.25)/12)
out <- data.frame(do12mo = round(pexp(12, dor)*100, 2), t2DFS=NA, t2fOS=NA)
for(i in 1:length(dor)) {
print(i)
out$t2DFS[i] <- timeToEvents(recruitment = enroll, median1 = mDFS, hr = hDFS, events = eDFS, drop.rate = dor[i],
tmax=52)
} # end of for(i in 1:length(dor))
for(i in 1:length(dor)) {
print(i)
out$t2fOS[i] <- timeToEvents(recruitment = enroll, median1 = mOS,  hr = hfOS, events = efOS, drop.rate = dor[i],
tmax=115)
} # end of for(i in 1:length(dor))
# show that there's a peak in the # of events and then #  goes down
require(anim.plots)
require(animation)
dor0 <- -log(1-.265)/12
t0 <- timeToEvents(recruitment = enroll, median1 = mDFS, hr = hDFS, events = eDFS, drop.rate = dor0, tmax=400)
ts <- sort(c(seq(0, 200, by=1)))
es <- cs <- rs <- rep(NA, length(ts))
for(i in 1:length(ts)) {
es[i] <- eventsAtTime(recruitment = enroll, median1 = mDFS, hr = hDFS, time = ts[i], drop.rate = dor0)
cs[i] <- eventsAtTime(recruitment = enroll, median1 = log(2)/dor0, hr = 1, time = ts[i], drop.rate = 0)
}
rs <- c(0,cumsum(enroll)[pmin(ts, 31)]) # enrollment over time
aoes <- anim.plot(ts, es, type='l', xlab='Months since FPI', ylab='Counts', sub='LFUP = 26.5% over 12 months',
main='Number of DFS events & Censored', bty='l', ylim=c(min(es), 700), col='blue', lwd=2, lty=1,
window=1:t, speed=40)
abline(h = 377, col='black', lty=2, lwd=1)
abline(h = 700, col='black', lty=2, lwd=1)
legend(150, 300, bty='n', lty=c(3,1), lwd=c(2,2), col=c('red', 'blue'), legend=c('LFUP', 'DFS'))
aocs <- anim.lines(ts, cs, col='red', lwd=2, lty=3, window=1:t, speed=40)
# Created by NDA
# Last modified by Anh - 28 Oct 2016
# ===================================
rm(list = ls())
source("../../../../../../Methods/R/survivalSampleSizeMisc.R")
# read accrual from Andrew's projection
enroll <- read.csv('../Sample_Size/AC_Calculation/Input/1_Andrew/Worksheet in WO29636 study AC Strategy_9May2016 AK.csv')
enroll <- enroll$Planned.Pts.recr.per.Month
enroll <- enroll[1:31]
enroll[31] <- enroll[31]-(sum(enroll)-700)
sum(enroll)
eDFS<- 377
mDFS<- 20
hDFS<- .75
efOS<- 428
mOS <- 34
hfOS<- .76
dor <- c(-log(1-.05)/24, -log(1-.034)/12, -log(1-.05)/12, -log(1-.1)/12, -log(1-.15)/12, -log(1-.2)/12, -log(1-.25)/12)
out <- data.frame(do12mo = round(pexp(12, dor)*100, 2), t2DFS=NA, t2fOS=NA)
for(i in 1:length(dor)) {
print(i)
out$t2DFS[i] <- timeToEvents(recruitment = enroll, median1 = mDFS, hr = hDFS, events = eDFS, drop.rate = dor[i],
tmax=52)
} # end of for(i in 1:length(dor))
for(i in 1:length(dor)) {
print(i)
out$t2fOS[i] <- timeToEvents(recruitment = enroll, median1 = mOS,  hr = hfOS, events = efOS, drop.rate = dor[i],
tmax=115)
} # end of for(i in 1:length(dor))
# show that there's a peak in the # of events and then #  goes down
require(anim.plots)
require(animation)
dor0 <- -log(1-.265)/12
t0 <- timeToEvents(recruitment = enroll, median1 = mDFS, hr = hDFS, events = eDFS, drop.rate = dor0, tmax=400)
ts <- sort(c(seq(0, 200, by=1)))
es <- cs <- rs <- rep(NA, length(ts))
for(i in 1:length(ts)) {
es[i] <- eventsAtTime(recruitment = enroll, median1 = mDFS, hr = hDFS, time = ts[i], drop.rate = dor0)
cs[i] <- eventsAtTime(recruitment = enroll, median1 = log(2)/dor0, hr = 1, time = ts[i], drop.rate = 0)
}
rs <- c(0,cumsum(enroll)[pmin(ts, 31)]) # enrollment over time
aoes <- anim.plot(ts, es, type='l', xlab='Months since FPI', ylab='Counts', sub='LFUP = 26.5% over 12 months',
main='Number of DFS events & Censored', bty='l', ylim=c(min(es), 700), col='blue', lwd=2, lty=1,
window=1:t, speed=40)
abline(h = 377, col='black', lty=2, lwd=1)
abline(h = 700, col='black', lty=2, lwd=1)
legend(150, 300, bty='n', lty=c(3,1), lwd=c(2,2), col=c('red', 'blue'), legend=c('LFUP', 'DFS'))
aocs <- anim.lines(ts, cs, col='red', lwd=2, lty=3, window=1:t, speed=40)
80-48
32/20
204*.9
184*1.1
204/1.1
186*1.1
n <- 204/2 / 1.1
n
n*2
n*2*1.1
power.prop.test(n, p1, p2)
p1 <- .48
p2 <- .8
prev <- .6
p1 <- .48
p2 <- .8
power.prop.test(n*prev, p1, p2)
power.prop.test(n*prev, p1, p2)$pow
prev <- .5
p1 <- .48
p2 <- .8
power.prop.test(n*prev, p1, p2)$pow
require(numDeriv)
x0 <- rnorm(100)
exact <- sc2.g(x0)
g <- grad(func=sc2.f, x=x0)
max(abs(exact - g)/(1 + abs(exact)))
gc <- grad(func=sc2.f, x=x0, method="complex")
max(abs(exact - gc)/(1 + abs(exact)))
f <- function(x) if(x[1]<=0) sum(sin(x)) else NA
grad(f, x=c(0,0), method="Richardson", side=c(-1, 1))
sc2.g <- function(x){
n <- length(x)
(1:n) * (exp(x) - 1) / n
}
x0 <- rnorm(100)
exact <- sc2.g(x0)
g <- grad(func=sc2.f, x=x0)
max(abs(exact - g)/(1 + abs(exact)))
gc <- grad(func=sc2.f, x=x0, method="complex")
max(abs(exact - gc)/(1 + abs(exact)))
f <- function(x) if(x[1]<=0) sum(sin(x)) else NA
grad(f, x=c(0,0), method="Richardson", side=c(-1, 1))
sc2.f <- function(x){
n <- length(x)
sum((1:n) * (exp(x) - x)) / n
}
x0 <- rnorm(100)
exact <- sc2.g(x0)
g <- grad(func=sc2.f, x=x0)
max(abs(exact - g)/(1 + abs(exact)))
gc <- grad(func=sc2.f, x=x0, method="complex")
max(abs(exact - gc)/(1 + abs(exact)))
f <- function(x) if(x[1]<=0) sum(sin(x)) else NA
grad(f, x=c(0,0), method="Richardson", side=c(-1, 1))
system.time(grad(func=sc2.f, x=x0))
system.time(jacobian(func=sc2.f, x=x0))
x0 <- rnorm(1e6)
system.time(jacobian(func=sc2.f, x=x0))
system.time(grad(func=sc2.f, x=x0))
x0 <- rnorm(1e3)
system.time(grad(func=sc2.f, x=x0))
system.time(jacobian(func=sc2.f, x=x0))
18*4
18*4+4*36
18+36+54
18+36+54+66
36*4
18+36+54
18+36+54+33
18+36+54+66
pbinom(q = 2, prob = .5, size = 9)
?pbinom
pbinom(q = 2, prob = .5, size = 18)
pbinom(q = 4, prob = .5, size = 18)
pbinom(q = 4, prob = .5, size = 18, lower.tail = T)
pbinom(q = 18, prob = .5, size = 700, lower.tail = T)
1-pbinom(q = 18, prob = .5, size = 700, lower.tail = T)
1-pbinom(q = 18, prob = .5, size = 50, lower.tail = T)
1-pbinom(q = 18, prob = .5, size = 30, lower.tail = T)
1-pbinom(q = 18, prob = .5, size = 40, lower.tail = T)
1-pbinom(q = 18, prob = .5, size = 45, lower.tail = T)
1-pbinom(q = 18, prob = .5, size = 42, lower.tail = T)
1-pbinom(q = 18, prob = .5, size = 44, lower.tail = T)
1-pbinom(q = 18, prob = .5, size = 43, lower.tail = T)
1-pbinom(q = 14, prob = .5, size = 43, lower.tail = T)
1-pbinom(q = 13, prob = .5, size = 43, lower.tail = T)
1-pbinom(q = 13, prob = .5, size = 42, lower.tail = T)
1-pbinom(q = 13, prob = .5, size = 41, lower.tail = T)
1-pbinom(q = 13, prob = .5, size = 40, lower.tail = T)
1/.4
arms <- sample(c('a', 'b'), size = n, replace = T, prob = .5)
set.seed(69)
lat.haz1a <- .8
lat.hr1 <- .5
lat.haz2a <- .8
lat.hr2 <- .7
n <- 500
arms <- sample(c('a', 'b'), size = n, replace = T, prob = .5)
arms <- sample(c('a', 'b'), size = n, replace = T, prob = rep(.5,2))
arms
lat.t1 <- lat.t2 <- rep(NA, n)
lat.t1 <- lat.t2 <- rep(NA, n)
lat.t1[arms=='a'] <- rexp(sum(arms=='a'), rate=lat.haz1a)
lat.t1[arms=='b'] <- rexp(sum(arms=='b'), rate=lat.haz1a * lat.hr1)
lat.t2[arms=='a'] <- rexp(sum(arms=='a'), rate=lat.haz2a)
lat.t2[arms=='b'] <- rexp(sum(arms=='b'), rate=lat.haz2a * lat.hr2)
lat.t1
times <- ifelse(lat.t1 <= lat.t2, lat.t1, lat.t2)
status<- ifelse(lat.t1 <= lat.t2, 1, 2)
dat <- data.frame(time, status, arms)
status<- ifelse(lat.t1 <= lat.t2, 1, 2)
dat <- data.frame(time, status, arms)
dat <- data.frame(times, status, arms)
head(dat)
require(cmp)
require(cmprsk)
require(riskRegression)
install.packages(riskRegression)
source('C:/Google Drive/0_frmDropbox/2_SNPCIFEst/SNPCIFEst_Paper/OriginalSNPcodes/2_snpcr.uti.r')
setwd("C:/GitHub/SNP_CR_R/R_SNP_Competing_Risks")
install.packages('MyRcpp_1.0.tar.gz', repos = NULL, type="source")
require(cmprsk)
require(eha)
require(parallel)
require(BB)
require(methods)
require(maxLik)
require(Matrix)
require(MLEcens)
require(matrixcalc)
require(varComp)
require(prodlim)
library(devtools)
install.packages('devtools')
library(devtools)
install.packages('MyRcpp_1.0.tar.gz', repos = NULL, type="source")
setwd("C:/GitHub/SNP_CR_R/R_SNP_Competing_Risks")
require(cmprsk)
require(eha)
require(parallel)
require(methods)
require(MLEcens)
require(maxLik)
require(Matrix)
require(matrixcalc)
require(varComp)
require(prodlim)
require(MyRcpp)
install.packages('MyRcpp_1.0.tar.gz', repos = NULL, type="source")
install.packages(c('cmprsk', 'eha', 'MLEcens', 'matrixcalc', 'varComp', 'prodlim'))
install.packages('MyRcpp_1.0.tar.gz', repos = NULL, type="source")
install.packages("C:/GitHub/SNP_CR_R/R_SNP_Competing_Risks/MyRcpp_1.0.tar.gz", repos = NULL, type = "source")
install.packages('devtools')
require(devtools)
install.packages("C:/GitHub/SNP_CR_R/R_SNP_Competing_Risks/MyRcpp_1.0.tar.gz", repos = NULL, type = "source")
