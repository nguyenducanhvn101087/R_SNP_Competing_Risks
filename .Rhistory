iwd.snp0 <- iwd(p)
iwd.snp
iwd.snp0
?sapply
iwd <- function(p) {# this version is for fixed weight function w
# p has the parameters from 2 groups
p1 <- p[1:l1]
p2 <- p[(l1+1):(l1+l2)]
tmp.pl1 <- parvect2parlist(params=p1, parinfo=parinfo1, exp.sig=F)
tmp.pl2 <- parvect2parlist(params=p2, parinfo=parinfo2, exp.sig=F)
# re  <- integrate(f=function(tt) {
#   (snp.cif(tt, theta=c(tmp.pl1$Phi[[j]], tmp.pl1$Mu_Sig[j,]),
#            parlist1$base.dens, tmp.pl1$Bet[[j]], Z1$Y,
#            exp(logprob(X=Z1$X, tmp.pl1$Gamma))[1,j],
#            mod="AFT") -
#      snp.cif(tt, theta=c(tmp.pl2$Phi[[j]], tmp.pl2$Mu_Sig[j,]),
#              parlist2$base.dens, tmp.pl2$Bet[[j]], Z2$Y,
#              exp(logprob(X=Z2$X, tmp.pl2$Gamma))[1,j],
#              mod="AFT")) * wfun(tt)
# },
# lower, upper, ..., subdivisions=subdivisions, rel.tol=rel.tol, abs.tol=abs.tol,
# stop.on.error=stop.on.error)$value
# # try to replace this re with a sum over many timepoints and for testing (taking der) no need to consider
# # devision by num of timepoints as they will "cancel out" as long as timepoints are equally spaced
re  <- lapply(seq(lower, upper, length.out = 250), function(tt){
(snp.cif(tt, theta=c(tmp.pl1$Phi[[j]], tmp.pl1$Mu_Sig[j,]),
parlist1$base.dens, tmp.pl1$Bet[[j]], Z1$Y,
exp(logprob(X=Z1$X, tmp.pl1$Gamma))[1,j],
mod="AFT") -
snp.cif(tt, theta=c(tmp.pl2$Phi[[j]], tmp.pl2$Mu_Sig[j,]),
parlist2$base.dens, tmp.pl2$Bet[[j]], Z2$Y,
exp(logprob(X=Z2$X, tmp.pl2$Gamma))[1,j],
mod="AFT")) * wfun(tt)
})
re <- sum(unlist(re)) * (upper-lower) / 249
re * wfix
} # end of iwd
iwd.snp <- iwd(p)
iwd.snp
?integrate
iwd <- function(p) {# this version is for fixed weight function w
# p has the parameters from 2 groups
p1 <- p[1:l1]
p2 <- p[(l1+1):(l1+l2)]
tmp.pl1 <- parvect2parlist(params=p1, parinfo=parinfo1, exp.sig=F)
tmp.pl2 <- parvect2parlist(params=p2, parinfo=parinfo2, exp.sig=F)
# re  <- integrate(f=function(tt) {
#   (snp.cif(tt, theta=c(tmp.pl1$Phi[[j]], tmp.pl1$Mu_Sig[j,]),
#            parlist1$base.dens, tmp.pl1$Bet[[j]], Z1$Y,
#            exp(logprob(X=Z1$X, tmp.pl1$Gamma))[1,j],
#            mod="AFT") -
#      snp.cif(tt, theta=c(tmp.pl2$Phi[[j]], tmp.pl2$Mu_Sig[j,]),
#              parlist2$base.dens, tmp.pl2$Bet[[j]], Z2$Y,
#              exp(logprob(X=Z2$X, tmp.pl2$Gamma))[1,j],
#              mod="AFT")) * wfun(tt)
# },
# lower, upper, ..., subdivisions=subdivisions, rel.tol=rel.tol, abs.tol=abs.tol,
# stop.on.error=stop.on.error)$value
# # try to replace this re with a sum over many timepoints and for testing (taking der) no need to consider
# # devision by num of timepoints as they will "cancel out" as long as timepoints are equally spaced
re  <- sapply(seq(lower, upper, length.out = 100), function(tt){
(snp.cif(tt, theta=c(tmp.pl1$Phi[[j]], tmp.pl1$Mu_Sig[j,]),
parlist1$base.dens, tmp.pl1$Bet[[j]], Z1$Y,
exp(logprob(X=Z1$X, tmp.pl1$Gamma))[1,j],
mod="AFT") -
snp.cif(tt, theta=c(tmp.pl2$Phi[[j]], tmp.pl2$Mu_Sig[j,]),
parlist2$base.dens, tmp.pl2$Bet[[j]], Z2$Y,
exp(logprob(X=Z2$X, tmp.pl2$Gamma))[1,j],
mod="AFT")) * wfun(tt)
})
re <- sum(re) * (upper-lower) / 99
re * wfix
} # end of iwd
iwd.snp <- iwd(p)
iwd.snp
iwd.snp0
jcb    <- jacobian(iwd, p) # delta method, tested against grad, same result but on avg faster
if (length(parlist1$K)==0) {
covmat1  <- try(solve(parlist1$hessian), silent=T)
} else {
hes1inv  <- try(solve(parlist1$hessian), silent=T)
covmat1  <- try(hes1inv %*% parlist1$K %*% hes1inv, silent=T)
} # end of if (is.null(parlist1$K)) else...
if (length(parlist2$K)==0) {
covmat2  <- try(solve(parlist2$hessian), silent=T)
} else {
hes2inv  <- try(solve(parlist2$hessian), silent=T)
covmat2  <- try(hes2inv %*% parlist2$K %*% hes2inv, silent=T)
} # end of if (is.null(parlist2$K)) else...
covmat <- bdiag(covmat1, covmat2)
var    <- diag(jcb %*% covmat %*% t(jcb)) # this is infact just 1x1 matrix, so diag is the whole matrix
var
iwd <- function(p) {# this version is for fixed weight function w
# p has the parameters from 2 groups
p1 <- p[1:l1]
p2 <- p[(l1+1):(l1+l2)]
tmp.pl1 <- parvect2parlist(params=p1, parinfo=parinfo1, exp.sig=F)
tmp.pl2 <- parvect2parlist(params=p2, parinfo=parinfo2, exp.sig=F)
re  <- integrate(f=function(tt) {
(snp.cif(tt, theta=c(tmp.pl1$Phi[[j]], tmp.pl1$Mu_Sig[j,]),
parlist1$base.dens, tmp.pl1$Bet[[j]], Z1$Y,
exp(logprob(X=Z1$X, tmp.pl1$Gamma))[1,j],
mod="AFT") -
snp.cif(tt, theta=c(tmp.pl2$Phi[[j]], tmp.pl2$Mu_Sig[j,]),
parlist2$base.dens, tmp.pl2$Bet[[j]], Z2$Y,
exp(logprob(X=Z2$X, tmp.pl2$Gamma))[1,j],
mod="AFT")) * wfun(tt)
},
lower, upper, ..., subdivisions=subdivisions, rel.tol=rel.tol, abs.tol=abs.tol,
stop.on.error=stop.on.error)$value
# try to replace this re with a sum over many timepoints and for testing (taking der) no need to consider
# devision by num of timepoints as they will "cancel out" as long as timepoints are equally spaced
# re  <- sapply(seq(lower, upper, length.out = 100), function(tt){
#   (snp.cif(tt, theta=c(tmp.pl1$Phi[[j]], tmp.pl1$Mu_Sig[j,]),
#            parlist1$base.dens, tmp.pl1$Bet[[j]], Z1$Y,
#            exp(logprob(X=Z1$X, tmp.pl1$Gamma))[1,j],
#            mod="AFT") -
#      snp.cif(tt, theta=c(tmp.pl2$Phi[[j]], tmp.pl2$Mu_Sig[j,]),
#              parlist2$base.dens, tmp.pl2$Bet[[j]], Z2$Y,
#              exp(logprob(X=Z2$X, tmp.pl2$Gamma))[1,j],
#              mod="AFT")) * wfun(tt)
# })
# re <- sum(re) * (upper-lower) / 99
re * wfix
} # end of iwd
jcb    <- jacobian(iwd, p) # delta method, tested against grad, same result but on avg faster
var0    <- diag(jcb %*% covmat %*% t(jcb)) # this is infact just 1x1 matrix, so diag is the whole matrix
var
var0
?sapply
source('D:/GoogleDrive/0_frmDropbox/2_SNPCIFEst/SNPCIFEst_Paper/OriginalSNPcodes/2_snpcr.uti.r', echo=TRUE)
cri <- 'HQCn'
eval(parse(text = paste("load('RData/AnalOuts/SimCIFnoLTAnal_SizeOfTest_Outs_", cri, "_wK_sumIWDtmDiv21to6.RDATA')", sep="")))
for (i in 1:length(Anal_SizeOfTest_Outs1to6tmDiv2)) {
for(j in 1:2) {
cat(paste('sce', i, 'cr', j))
nNA <- sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]], function(x) is.na(x$p.val)))
tmp <-
sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
function(x) x$iwd-qnorm(.975)*sqrt(x$var)>0 | x$iwd+qnorm(.975)*sqrt(x$var)<0), na.rm = T)/(500-nNA)
# sd <- sd(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]], function(x) x$iwd))
# tmp <-
#   sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#              function(x) x$iwd-qnorm(.975)*sd>0 | x$iwd+qnorm(.975)*sd<0))/500
# tmp <-
#   sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#              function(x) x$p.val<.05))/500
print(tmp)
}
}
eval(parse(text = paste("load('RData/AnalOuts/SimCIFnoLTAnal_SizeOfTest_Outs_", cri, "tmDiv21to6.RDATA')", sep="")))
for (i in 1:length(Anal_SizeOfTest_Outs1to6tmDiv2)) {
for(j in 1:2) {
cat(paste('sce', i, 'cr', j))
nNA <- sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]], function(x) is.na(x$p.val)))
tmp <-
sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
function(x) x$iwd-qnorm(.975)*sqrt(x$var)>0 | x$iwd+qnorm(.975)*sqrt(x$var)<0), na.rm = T)/(500-nNA)
# sd <- sd(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]], function(x) x$iwd))
# tmp <-
#   sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#              function(x) x$iwd-qnorm(.975)*sd>0 | x$iwd+qnorm(.975)*sd<0))/500
# tmp <-
#   sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#              function(x) x$p.val<.05))/500
print(tmp)
}
}
setwd("C:/Users/nguyea37/Google Drive/0_frmDropbox/2_SNPCIFEst/SimulsApps/Simuls")
cri <- 'HQCn'
# cri <- 'HQCd'
# See the scenarios
load(file="RData/SimInputs/SimCIFnoLT.RDATA")
# Show the scenario
DistNames <- c(TTEDists[[1]]$distnames[1], TTEDists[[2]]$distnames[1], TTEDists[[3]]$distnames[1],
TTEDists[[4]]$distnames[1], TTEDists[[5]]$distnames[1], TTEDists[[6]]$distnames[1])
P1s       <- c(Ps[[1]][1,1], Ps[[2]][1,1], Ps[[3]][1,1])
cbind(Js[ScenCombs[,1]], Ns[ScenCombs[,2]], P1s[ScenCombs[,3]], RCPs[ScenCombs[,4]],
DistNames[ScenCombs[,5]], T_mQuans[ScenCombs[,6]])
# In total there are: 10 scenarios to be considered
# eval(parse(text=paste("load('RData/AnalOuts/SimCIFnoLTAnal_SizeOfTest_Outs_", cri, "_2ndOrVartmDiv21to6.RDATA')", sep="")))
eval(parse(text = paste("load('RData/AnalOuts/SimCIFnoLTAnal_SizeOfTest_Outs_", cri, "tmDiv21to6.RDATA')", sep="")))
# eval(parse(text = paste("load('RData/AnalOuts/SimCIFnoLTAnal_SizeOfTest_Outs_", cri, "_wK_sumIWDtmDiv21to6.RDATA')", sep="")))
for (i in 1:length(Anal_SizeOfTest_Outs1to6tmDiv2)) {
for(j in 1:2) {
cat(paste('sce', i, 'cr', j))
nNA <- sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]], function(x) is.na(x$p.val)))
tmp <-
sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
function(x) x$iwd-qnorm(.975)*sqrt(x$var)>0 | x$iwd+qnorm(.975)*sqrt(x$var)<0), na.rm = T)/(500-nNA)
# sd <- sd(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]], function(x) x$iwd))
# tmp <-
#   sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#              function(x) x$iwd-qnorm(.975)*sd>0 | x$iwd+qnorm(.975)*sd<0))/500
# tmp <-
#   sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#              function(x) x$p.val<.05))/500
print(tmp)
}
}
eval(parse(text = paste("load('RData/AnalOuts/SimCIFnoLTAnal_SizeOfTest_Outs_", cri, "tmDiv27to12.RDATA')", sep="")))
for (i in 1:length(Anal_SizeOfTest_Outs7to12tmDiv2)) {
for(j in 1:2) {
cat(paste('sce', i, 'cr', j))
tmp <-
sum(sapply(Anal_SizeOfTest_Outs7to12tmDiv2[[i]]$best.snp[[j]],
function(x) x$iwd-qnorm(.975)*sqrt(x$var)>0 | x$iwd+qnorm(.975)*sqrt(x$var)<0))/500
print(tmp)
}
}
for (i in 1:length(Anal_SizeOfTest_Outs1to6tmDiv2)) {
for(j in 1:2) {
cat(paste('sce', i, 'cr', j))
nNA <- sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]], function(x) is.na(x$p.val)))
# tmp <-
# sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#            function(x) x$iwd-qnorm(.975)*sqrt(x$var)>0 | x$iwd+qnorm(.975)*sqrt(x$var)<0), na.rm = T)/(500-nNA)
sd <- sd(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]], function(x) x$iwd))
# tmp <-
#   sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#              function(x) x$iwd-qnorm(.975)*sd>0 | x$iwd+qnorm(.975)*sd<0))/500
# tmp <-
#   sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#              function(x) x$p.val<.05))/500
print(tmp)
}
}
for (i in 1:length(Anal_SizeOfTest_Outs1to6tmDiv2)) {
for(j in 1:2) {
cat(paste('sce', i, 'cr', j))
nNA <- sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]], function(x) is.na(x$p.val)))
# tmp <-
# sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#            function(x) x$iwd-qnorm(.975)*sqrt(x$var)>0 | x$iwd+qnorm(.975)*sqrt(x$var)<0), na.rm = T)/(500-nNA)
(sd <- sd(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]], function(x) x$iwd)))
# tmp <-
#   sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#              function(x) x$iwd-qnorm(.975)*sd>0 | x$iwd+qnorm(.975)*sd<0))/500
# tmp <-
#   sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#              function(x) x$p.val<.05))/500
# print(tmp)
}
}
for (i in 1:length(Anal_SizeOfTest_Outs1to6tmDiv2)) {
for(j in 1:2) {
cat(paste('sce', i, 'cr', j))
nNA <- sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]], function(x) is.na(x$p.val)))
# tmp <-
# sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#            function(x) x$iwd-qnorm(.975)*sqrt(x$var)>0 | x$iwd+qnorm(.975)*sqrt(x$var)<0), na.rm = T)/(500-nNA)
sd <- sd(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]], function(x) x$iwd))
# tmp <-
#   sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#              function(x) x$iwd-qnorm(.975)*sd>0 | x$iwd+qnorm(.975)*sd<0))/500
# tmp <-
#   sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#              function(x) x$p.val<.05))/500
# print(tmp)
print(sd)
}
}
for (i in 1:length(Anal_SizeOfTest_Outs1to6tmDiv2)) {
for(j in 1:2) {
cat(paste('sce', i, 'cr', j))
nNA <- sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]], function(x) is.na(x$p.val)))
# tmp <-
# sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#            function(x) x$iwd-qnorm(.975)*sqrt(x$var)>0 | x$iwd+qnorm(.975)*sqrt(x$var)<0), na.rm = T)/(500-nNA)
# sd <- sd(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]], function(x) x$iwd))
# tmp <-
#   sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#              function(x) x$iwd-qnorm(.975)*sd>0 | x$iwd+qnorm(.975)*sd<0))/500
# tmp <-
#   sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#              function(x) x$p.val<.05))/500
# print(tmp)
summary(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]], function(x) x$p.val))
}
}
for (i in 1:length(Anal_SizeOfTest_Outs1to6tmDiv2)) {
for(j in 1:2) {
cat(paste('sce', i, 'cr', j))
nNA <- sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]], function(x) is.na(x$p.val)))
# tmp <-
# sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#            function(x) x$iwd-qnorm(.975)*sqrt(x$var)>0 | x$iwd+qnorm(.975)*sqrt(x$var)<0), na.rm = T)/(500-nNA)
# sd <- sd(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]], function(x) x$iwd))
# tmp <-
#   sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#              function(x) x$iwd-qnorm(.975)*sd>0 | x$iwd+qnorm(.975)*sd<0))/500
# tmp <-
#   sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#              function(x) x$p.val<.05))/500
# print(tmp)
median(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]], function(x) x$p.val))
}
}
for (i in 1:length(Anal_SizeOfTest_Outs1to6tmDiv2)) {
for(j in 1:2) {
cat(paste('sce', i, 'cr', j))
nNA <- sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]], function(x) is.na(x$p.val)))
# tmp <-
# sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#            function(x) x$iwd-qnorm(.975)*sqrt(x$var)>0 | x$iwd+qnorm(.975)*sqrt(x$var)<0), na.rm = T)/(500-nNA)
# sd <- sd(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]], function(x) x$iwd))
# tmp <-
#   sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#              function(x) x$iwd-qnorm(.975)*sd>0 | x$iwd+qnorm(.975)*sd<0))/500
# tmp <-
#   sum(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]],
#              function(x) x$p.val<.05))/500
# print(tmp)
print(median(sapply(Anal_SizeOfTest_Outs1to6tmDiv2[[i]]$best.snp[[j]], function(x) x$p.val)))
}
}
setwd("C:/GitHub/SNP_CR_R/R_SNP_Competing_Risks")
rm(list = ls())
source("1_snpcr.r")
# library("timereg")
# require(graphics)
# require(etm)
graphics.off()
#============================================================
dat <- read.csv('cleardeath.csv', header = T)
dim(Da)
dim(dat)
head(dat)
dim(dat) # 175
# Pure CIF estimation for each treatment arm
dat.mono <- subset(dat, subset = r.arm.long == 'Ampho mono') # mono  therapy
dat.comb <- subset(dat, subset = r.arm.long != 'Ampho mono') # combo therapy
formula.app <- Hist(list(tt.clearDeath.lower, tt.clearDeath.upper), ev.clearDeath, cens.code=0) ~ 1
# SNP-based estimation
snp.mod.mono <- snp.crreg(formula   = formula.app, data = dat.mono,
base.dens = c("exp", "exp"), kms = c(3, 3),
criterion = 'HQCn', anal.grad = anal.grad, check.hess = F,
parallelism=T, ncores=4,
control=list(maxiter=100))
snp.mod.comb <- snp.crreg(formula   = formula.app, data = dat.comb,
base.dens = c("stdnorm", "stdnorm"), kms = c(3, 3),
criterion = 'HQCn', anal.grad = anal.grad, check.hess = F,
parallelism=T, ncores=4,
control=list(maxiter=100))
head(dat.mono)
anal.grad <- snpcr.grad.loglik # function implementing the analytical gradient for the loglikelihood,.
snp.mod.mono <- snp.crreg(formula   = formula.app, data = dat.mono,
base.dens = c("exp", "exp"), kms = c(3, 3),
criterion = 'HQCn', anal.grad = anal.grad, check.hess = F,
parallelism=T, ncores=4,
control=list(maxiter=100))
snp.mod.comb <- snp.crreg(formula   = formula.app, data = dat.comb,
base.dens = c("stdnorm", "stdnorm"), kms = c(3, 3),
criterion = 'HQCn', anal.grad = anal.grad, check.hess = F,
parallelism=T, ncores=4,
control=list(maxiter=100))
## Un-comment below to try diff. base densities and compare HQCn
# snp.mod.mono2 <- snp.crreg(formula   = formula.app, data = dat.mono,
#                           base.dens = c("stdnorm", "stdnorm"), kms = c(3, 3),
#                           criterion = 'HQCn', anal.grad = anal.grad, check.hess = F,
#                           parallelism=T, ncores=4,
#                           control=list(maxiter=100))
#
# snp.mod.comb2 <- snp.crreg(formula   = formula.app, data = dat.comb,
#                           base.dens = c("exp", "exp"), kms = c(3, 3),
#                           criterion = 'HQCn', anal.grad = anal.grad, check.hess = F,
#                           parallelism=T, ncores=4,
#                           control=list(maxiter=100))
# Plot results - Demo of funciton snp.cif --------------------------------------------------
times <- seq(0, 28, length.out = 100)
# get best result from each model
best.snp.mono <- tail(snp.mod.mono$final.outs, 1)[[1]]
best.snp.comb <- tail(snp.mod.comb$final.outs, 1)[[1]]
# event type 1 is fungal clearance
cif.mono.clear <- snp.cif(tt = times, theta = c(best.snp.mono$phis[[1]], best.snp.mono$mu.sigs[1,]),
base.dens = snp.mod.mono$base.dens[1], bet = NULL, y = NULL, P = best.snp.mono$P[1,1])
cif.comb.clear <- snp.cif(tt = times, theta = c(best.snp.comb$phis[[1]], best.snp.comb$mu.sigs[1,]),
base.dens = snp.mod.comb$base.dens[1], bet = NULL, y = NULL, P = best.snp.comb$P[1,1])
# event type 2 is prior death
cif.mono.death <- snp.cif(tt = times, theta = c(best.snp.mono$phis[[2]], best.snp.mono$mu.sigs[2,]),
base.dens = snp.mod.mono$base.dens[2], bet = NULL, y = NULL, P = best.snp.mono$P[1,2])
cif.comb.death <- snp.cif(tt = times, theta = c(best.snp.comb$phis[[2]], best.snp.comb$mu.sigs[2,]),
base.dens = snp.mod.comb$base.dens[2], bet = NULL, y = NULL, P = best.snp.comb$P[1,2])
x11()
plot(times, cif.mono.clear, type='l', bty= 'n', xlab='Days since randomization', ylab = 'Probability',
xlim=c(0,28), ylim=c(0,1), lwd=2, main='CIF of Fungale  Clearance and 1 - CIF of Prior Death')
lines(times, cif.comb.clear, col=gray(.8), lwd=2)
lines(times, 1-cif.mono.death, lwd=2)
lines(times, 1-cif.comb.death, col=gray(.8), lwd=2)
text(x=20, y=0.2, labels = 'Fungal Clearance', cex = 2)
text(x=20, y=0.9, labels = 'Prior Death', cex = 2)
legend(x = 0, y=.7, lwd=2, col = c('black', gray(0.8)), legend = c('Ampho mono', 'Ampho + flucytosine'), bty = 'n')
setwd("C:/GitHub/SNP_CR_R/R_SNP_Competing_Risks")
# Created:  30 Dec 2016
# Modified: 21 Jan 2017
# Anh Nguyen Duc - OUCRU
#================================================================================
# Contents:
# Simulating Competing Risks Data from Underlying SNP-based Model
# - demo of func. simttesnp
# Estimating Competing Risks Data Using SNP-based Model
# - demo of func. snp.crreg
# CIF Comparision using SNP-based IWD
# - demo of func. iwd.snp.onecif
# CLEAR DEATH EXAMPLE
# - demo of func. snp.cif
#================================================================================
rm(list = ls())
source("1_snpcr.r")
# library("timereg")
# require(graphics)
# require(etm)
graphics.off()
#============================================================
dat <- read.csv('cleardeath.csv', header = T)
dim(dat) # 175
# ************************* Pure CIF estimation for each treatment arm ********************************
dat.mono <- subset(dat, subset = r.arm.long == 'Ampho mono') # mono  therapy
dat.comb <- subset(dat, subset = r.arm.long != 'Ampho mono') # combo therapy
formula.app <- Hist(list(tt.clearDeath.lower, tt.clearDeath.upper), ev.clearDeath, cens.code=0) ~ 1
anal.grad <- snpcr.grad.loglik # function implementing the analytical gradient for the loglikelihood,.
# This has already been implemented in snpcr.grad.loglik, hence should always be used!
formula.app.all <- Hist(list(tt.clearDeath.lower, tt.clearDeath.upper), ev.clearDeath, cens.code=0) ~ r.arm.long
snp.mod.all <- snp.crreg(formula   = formula.app.all, data = dat,
base.dens = c("exp", "exp"), kms = c(3, 3),
criterion = 'HQCn', anal.grad = anal.grad, check.hess = F,
parallelism=T, ncores=4,
control=list(maxiter=100))
snp.mod.mono <- snp.crreg(formula   = formula.app, data = dat.mono,
base.dens = c("exp", "exp"), kms = c(3, 3),
criterion = 'HQCn', anal.grad = anal.grad, check.hess = F,
parallelism=T, ncores=4,
control=list(maxiter=100))
snp.mod.comb <- snp.crreg(formula   = formula.app, data = dat.comb,
base.dens = c("stdnorm", "stdnorm"), kms = c(3, 3),
criterion = 'HQCn', anal.grad = anal.grad, check.hess = F,
parallelism=T, ncores=4,
control=list(maxiter=100))
times <- seq(0, 28, length.out = 100)
# get best result from each model
best.snp.mono <- tail(snp.mod.mono$final.outs, 1)[[1]]
best.snp.comb <- tail(snp.mod.comb$final.outs, 1)[[1]]
# event type 1 is fungal clearance
cif.mono.clear <- snp.cif(tt = times, theta = c(best.snp.mono$phis[[1]], best.snp.mono$mu.sigs[1,]),
base.dens = snp.mod.mono$base.dens[1], bet = NULL, y = NULL, P = best.snp.mono$P[1,1])
cif.comb.clear <- snp.cif(tt = times, theta = c(best.snp.comb$phis[[1]], best.snp.comb$mu.sigs[1,]),
base.dens = snp.mod.comb$base.dens[1], bet = NULL, y = NULL, P = best.snp.comb$P[1,1])
# event type 2 is prior death
cif.mono.death <- snp.cif(tt = times, theta = c(best.snp.mono$phis[[2]], best.snp.mono$mu.sigs[2,]),
base.dens = snp.mod.mono$base.dens[2], bet = NULL, y = NULL, P = best.snp.mono$P[1,2])
cif.comb.death <- snp.cif(tt = times, theta = c(best.snp.comb$phis[[2]], best.snp.comb$mu.sigs[2,]),
base.dens = snp.mod.comb$base.dens[2], bet = NULL, y = NULL, P = best.snp.comb$P[1,2])
x11()
plot(times, cif.mono.clear, type='l', bty= 'n', xlab='Days since randomization', ylab = 'Probability',
xlim=c(0,28), ylim=c(0,1), lwd=2, main='CIF of Fungale  Clearance and 1 - CIF of Prior Death')
lines(times, cif.comb.clear, col=gray(.8), lwd=2)
lines(times, 1-cif.mono.death, lwd=2)
lines(times, 1-cif.comb.death, col=gray(.8), lwd=2)
text(x=20, y=0.2, labels = 'Fungal Clearance', cex = 2)
text(x=20, y=0.9, labels = 'Prior Death', cex = 2)
legend(x = 0, y=.7, lwd=2, col = c('black', gray(0.8)), legend = c('Ampho mono', 'Ampho + flucytosine'), bty = 'n')
snp.mod.all
best.snp.all <- tail(snp.mod.all$final.outs, 1)[[1]]
best.snp.all$bets
best.snp.all$P
logprob(c(1,1), best.snp.all$best[[1]])
ee
logprob(matrix(c(1,1), nrow=1), best.snp.all$best[[1]])
exp(logprob(matrix(c(1,1), nrow=1), best.snp.all$best[[1]]))
(logprob(matrix(c(1,1), nrow=1), best.snp.all$best[[1]]))
best.snp.all$best[[1]]
(logprob(matrix(c(1,1), nrow=1), best.snp.all$bets[[1]]))
exp(logprob(matrix(c(1,1), nrow=1), best.snp.all$bets[[1]]))
exp(logprob(matrix(c(1), nrow=1), best.snp.all$bets[[1]]))
cif.mono.clear <- snp.cif(tt = times, theta = c(best.snp.all$phis[[1]], best.snp.all$mu.sigs[1,]),
base.dens = snp.mod.all$base.dens[1], bet = best.snp.all$bets[[1]], y = 0,
P = exp(logprob(matrix(1, nrow=1), best.snp.all$bets[[1]])))
ee
cif.mono.clear <- snp.cif(tt = times, theta = c(best.snp.all$phis[[1]], best.snp.all$mu.sigs[1,]),
base.dens = snp.mod.all$base.dens[1], bet = best.snp.all$bets[[1]], y = 0,
P = exp(logprob(matrix(1, nrow=1), best.snp.all$bets[[1]]))[1])
cif.mono.clear
cif.mono.clear <- snp.cif(tt = times, theta = c(best.snp.all$phis[[1]], best.snp.all$mu.sigs[1,]),
base.dens = snp.mod.all$base.dens[1], bet = best.snp.all$bets[[1]], y = 0,
P = exp(logprob(matrix(0, nrow=1), best.snp.all$bets[[1]]))[1])
cif.mono.clear
cif.comb.clear <- snp.cif(tt = times, theta = c(best.snp.all$phis[[1]], best.snp.all$mu.sigs[1,]),
base.dens = snp.mod.all$base.dens[1], bet = best.snp.all$bets[[1]], y = 1,
P = exp(logprob(matrix(1, nrow=1), best.snp.all$bets[[1]]))[1])
cif.comb.clear
best.snp.all$bets
best.snp.all$gammas
exp(logprob(matrix(0, nrow=1), best.snp.all$gammas[[1]]))
exp(logprob(matrix(1, nrow=1), best.snp.all$gammas[[1]]))
exp(logprob(matrix(c(1,0), nrow=1), best.snp.all$gammas[[1]]))
exp(logprob(matrix(c(1,1), nrow=1), best.snp.all$gammas[[1]]))
logprob
best.snp.mono$base.dens <- snp.mod.mono$base.dens
best.snp.comb$base.dens <- snp.mod.comb$base.dens
iwd.out <- iwd.snp.onecif(parlist1 = best.snp.mono, parlist2 = best.snp.comb,
j = 2, wfun = function(x) 1, wfix = 1, lower= 0, upper=28)
warnings()
iwd.out
iwd.out <- iwd.snp.onecif(parlist1 = best.snp.mono, parlist2 = best.snp.comb,
j = 2, wfun = function(x) 1, wfix = 1, lower= 0, upper=30)
iwd.out
iwd.out.clear <- iwd.snp.onecif(parlist1 = best.snp.mono, parlist2 = best.snp.comb,
j = 1, wfun = function(x) 1, wfix = 1, lower= 0, upper=28)
iwd.out.clear
iwd.out.death <- iwd.snp.onecif(parlist1 = best.snp.mono, parlist2 = best.snp.comb,
j = 2, wfun = function(x) 1, wfix = 1, lower= 0, upper=28)
iwd.out.death
